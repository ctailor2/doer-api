plugins {
    id 'java'
    id 'scala'
    id "org.flywaydb.flyway" version "5.2.4"
    id 'org.springframework.boot' version '2.1.4.RELEASE'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'api'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly('org.projectlombok:lombok:1.16.10')
    annotationProcessor('org.projectlombok:lombok:1.16.10')

    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jdbc:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile('org.springframework.plugin:spring-plugin-core:1.0.0.RELEASE')
    compile('org.springframework.security:spring-security-crypto:4.1.2.RELEASE')
    compile('org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE')
    compile('org.postgresql:postgresql:9.4-1206-jdbc42')
    compile('org.flywaydb:flyway-core:5.2.4')
    compile('org.scala-lang:scala-library:2.11.12')
    compile('com.fasterxml.jackson.module:jackson-module-scala_2.13:2.10.3')

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile('com.jayway.jsonpath:json-path:2.2.0')
    testCompile('com.jayway.jsonpath:json-path-assert:2.2.0')
    testCompile('org.scalatest:scalatest_2.11:3.0.0')
}

flyway {
    def database
    if (!project.hasProperty('testdb')) {
        database = "doer_api"
    } else {
        database = "doer_api_test"
    }
    url = 'jdbc:postgresql://localhost:5432/' + database
}

test {
    exclude 'integration/**'
}

task integrationTest(type: Test) {
    include 'integration/**'
}

sourceSets {
    main {
        java {
            srcDirs = []
        }
        scala {
            srcDirs = ['src/main/java', 'src/main/scala']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        scala {
            srcDirs = ['src/test/scala']
        }
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

task stage(dependsOn: build) {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(stage)) {
            test.enabled = false
            integrationTest.enabled = false
        }
    }
}